digraph "cluster0web_server.py" {
	graph [compound=True fontname="DejaVu Sans Mono" label="web_server.py" pack=False rankdir=TB ranksep=0.02]
	node [fontname="DejaVu Sans Mono"]
	edge [fontname="DejaVu Sans Mono"]
	1 [label="\"\"\"\lA simple Web server.\lGET requests must name a specific file,\lsince it does not assume an index.html.\l\"\"\"\limport socket\limport threading\limport os\ldef handler(conn_socket: socket.socket, address: tuple[str, int]) ->None:...\ldef main() ->None:..." fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	53 [label="if __name__ == '__main__':" fillcolor="#FF6752" shape=diamond style="filled,solid"]
	54 [label="main()" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
	54 -> 56 [label=calls style=dashed]
	subgraph cluster_54 {
		graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		56 [label=main color="#E552FF" shape=tab style=filled]
	}
	53 -> 54 [label="__name__ == '__main__'" color=green]
	1 -> 53 [label="" color=black]
	subgraph cluster0handler {
		graph [compound=True fontname="DejaVu Sans Mono" label=handler pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		3 [label="\"\"\"\l    Handles the part of the client work-flow that is client-dependent,\l    and thus may be delayed by the user, blocking program flow.\l    \"\"\"\l\"\"\"\l    conn_socket.recv(1024).decode(): Recieves up to 1024 bytes from the client through the socket. Assume that the HTTP request will fit within this size.\l    .decode()\": Convets the recieved bytes into a string (assumed to be UTF-8 encoded\l    print(f\"Recevied request...\"): Logs the recieved request along with the client address for debugging\l    \"\"\"" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		4 [label="request = conn_socket.recv(1024).decode()
print(f\"\"\"Received request from {address}:
{request}\"\"\")
\"\"\"
        request.splitline()[0]: The HTTP request has multiple lines. This extracts the first line (called the request line), which contains the HTTP method, the requested file path an the HTTP method, the requested file path, and the HTTP version
        \"\"\"
request_line = request.splitlines()[0]
filename = request_line.split()[1]" fillcolor=orange shape=Mdiamond style="filled,solid"]
		6 [label="response_header = 'HTTP/1.1 404 Not Found\r\nContent-Type: text/html\r\n\r\n'\lresponse_body = (\l    b\"\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <title>Page not found!!</title>\n          </head>\n          <body>\n            <h1>404 Page Not Found</h1>\n            <p1>Sorry, the page you're looking for does not exist.</p>\n          </body>\n        </html>\n        \"\l    )\lconn_socket.sendall(response_header.encode() + response_body)" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		6 -> 7 [label=calls style=dashed]
		subgraph cluster_6 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			7 [label="conn_socket.sendall" color="#E552FF" shape=tab style=filled]
			8 [label="response_header.encode" color="#E552FF" shape=tab style=filled]
			7 -> 8 [color=black]
		}
		5 [label="conn_socket.close()" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		5 -> 27 [label=calls style=dashed]
		subgraph cluster_5 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			27 [label="conn_socket.close" color="#E552FF" shape=tab style=filled]
		}
		6 -> 5 [label="" color=black]
		9 [label="print(f'Bad request from {address}: {e}')" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		9 -> 10 [label=calls style=dashed]
		subgraph cluster_9 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			10 [label=print color="#E552FF" shape=tab style=filled]
		}
		9 -> 5 [label="" color=black]
		4 -> 11 [label=calls style=dashed]
		4 -> 12 [label=calls style=dashed]
		4 -> 13 [label=calls style=dashed]
		4 -> 14 [label=calls style=dashed]
		subgraph cluster_4 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			11 [label="conn_socket.recv.decode" color="#E552FF" shape=tab style=filled]
			12 [label=print color="#E552FF" shape=tab style=filled]
			13 [label="request.splitlines" color="#E552FF" shape=tab style=filled]
			14 [label="request_line.split" color="#E552FF" shape=tab style=filled]
		}
		15 [label="if filename == '/':" fillcolor="#FF6752" shape=diamond style="filled,solid"]
		16 [label="filename = '/index.html'" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		17 [label="file_path = '.' + filename\lprint(f'Serving file from path: {file_path}')\lprint(f'Serving file from absolute path: {os.path.abspath(file_path)}')\lresponse_body = f.read()\lresponse_header = 'HTTP/1.1 200 OK\r\n'\lresponse_header += 'Content-Type: text/html\r\n'\lresponse_header += f'Content-Length: {len(response_body)}\r\n\r\n'\lconn_socket.sendall(response_header.encode())\lconn_socket.sendall(response_body)" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		17 -> 18 [label=calls style=dashed]
		17 -> 19 [label=calls style=dashed]
		17 -> 21 [label=calls style=dashed]
		17 -> 22 [label=calls style=dashed]
		17 -> 23 [label=calls style=dashed]
		17 -> 24 [label=calls style=dashed]
		17 -> 26 [label=calls style=dashed]
		subgraph cluster_17 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			18 [label=print color="#E552FF" shape=tab style=filled]
			19 [label=print color="#E552FF" shape=tab style=filled]
			20 [label="os.path.abspath" color="#E552FF" shape=tab style=filled]
			19 -> 20 [color=black]
			21 [label=open color="#E552FF" shape=tab style=filled]
			22 [label="f.read" color="#E552FF" shape=tab style=filled]
			23 [label=len color="#E552FF" shape=tab style=filled]
			24 [label="conn_socket.sendall" color="#E552FF" shape=tab style=filled]
			25 [label="response_header.encode" color="#E552FF" shape=tab style=filled]
			24 -> 25 [color=black]
			26 [label="conn_socket.sendall" color="#E552FF" shape=tab style=filled]
		}
		17 -> 5 [label="" color=black]
		16 -> 17 [label="" color=black]
		15 -> 16 [label="filename == '/'" color=green]
		15 -> 17 [label="(filename != '/')" color=red]
		4 -> 15 [label="" color=black]
		3 -> 4 [label="" color=black]
	}
	subgraph cluster0main {
		graph [compound=True fontname="DejaVu Sans Mono" label=main pack=False rankdir=TB ranksep=0.02]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		31 [label="server_socket = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)\lserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\lserver_port = 6789\lserver_socket.bind(('0.0.0.0', server_port))\lserver_socket.listen(2)\lprint(f'Server started on port {server_port}, listening for connections...')\lthreads = []" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		31 -> 32 [label=calls style=dashed]
		31 -> 33 [label=calls style=dashed]
		31 -> 34 [label=calls style=dashed]
		31 -> 35 [label=calls style=dashed]
		31 -> 36 [label=calls style=dashed]
		subgraph cluster_31 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			32 [label="socket.socket" color="#E552FF" shape=tab style=filled]
			33 [label="server_socket.setsockopt" color="#E552FF" shape=tab style=filled]
			34 [label="server_socket.bind" color="#E552FF" shape=tab style=filled]
			35 [label="server_socket.listen" color="#E552FF" shape=tab style=filled]
			36 [label=print color="#E552FF" shape=tab style=filled]
		}
		37 [label="try:" fillcolor=orange shape=Mdiamond style="filled,solid"]
		39 [label="print('Exception occurred (maybe you killed the server)')\lprint(e)" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		39 -> 40 [label=calls style=dashed]
		39 -> 41 [label=calls style=dashed]
		subgraph cluster_39 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			40 [label=print color="#E552FF" shape=tab style=filled]
			41 [label=print color="#E552FF" shape=tab style=filled]
		}
		38 [label="server_socket.close()" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		38 -> 50 [label=calls style=dashed]
		subgraph cluster_38 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			50 [label="server_socket.close" color="#E552FF" shape=tab style=filled]
		}
		39 -> 38 [label="" color=black]
		42 [label="while True:" fillcolor="#FFBE52" shape=hexagon style="filled,solid"]
		43 [label="conn_socket, client_address = server_socket.accept()\lprint(f'Connection established with {client_address}')\lnew_thread = threading.Thread(target=handler, args=(conn_socket,\l    client_address))\lnew_thread.start()\lthreads.append(new_thread)" fillcolor="#FFFB81" shape=rectangle style="filled,solid"]
		43 -> 45 [label=calls style=dashed]
		43 -> 46 [label=calls style=dashed]
		43 -> 47 [label=calls style=dashed]
		43 -> 48 [label=calls style=dashed]
		43 -> 49 [label=calls style=dashed]
		subgraph cluster_43 {
			graph [color=purple compound=true fontname="DejaVu Sans Mono" label="" rankdir=TB ranksep=0.02 shape=tab style=filled]
			node [fontname="DejaVu Sans Mono"]
			edge [fontname="DejaVu Sans Mono"]
			45 [label="server_socket.accept" color="#E552FF" shape=tab style=filled]
			46 [label=print color="#E552FF" shape=tab style=filled]
			47 [label="threading.Thread" color="#E552FF" shape=tab style=filled]
			48 [label="new_thread.start" color="#E552FF" shape=tab style=filled]
			49 [label="threads.append" color="#E552FF" shape=tab style=filled]
		}
		43 -> 42 [label="" color=black]
		42 -> 43 [label=True color=green]
		42 -> 38 [label="(False)" color=red]
		37 -> 42 [label="" color=black]
		31 -> 37 [label="" color=black]
	}
	subgraph cluster_KEY {
		graph [fontname="DejaVu Sans Mono" label=KEY]
		node [fontname="DejaVu Sans Mono"]
		edge [fontname="DejaVu Sans Mono"]
		input [fillcolor="#afeeee" shape=parallelogram style=filled]
		default [fillcolor="#FFFB81" shape=rectangle style=filled]
		if [fillcolor="#FF6752" shape=diamond style=filled]
		for [fillcolor="#FFBE52" shape=hexagon style=filled]
		while [fillcolor="#FFBE52" shape=hexagon style=filled]
		call [fillcolor="#E552FF" shape=tab style=filled]
		return [fillcolor="#98fb98" shape=parallelogram style=filled]
		try [fillcolor=orange shape=Mdiamond style=filled]
		raise [fillcolor="#98fb98" shape=house style=filled]
		if -> input [style=invis]
		input -> call [style=invis]
		for -> return [style=invis]
		return -> default [style=invis]
		try -> raise [style=invis]
	}
}
